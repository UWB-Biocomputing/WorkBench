package edu.uwb.braingrid.workbench.ui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.logging.Logger;

import edu.uwb.braingrid.workbench.comm.SecureFileTransfer;
import edu.uwb.braingrid.workbench.model.SimulationSpecification;

/**
 * Specifies the context for a simulation execution script. For example, should the sequential
 * version of the simulator be used to perform the simulation, or should the parallel version be
 * used? Will the source code be updated first? Will the simulator be executed remotely? Answers to
 * these questions determine the content of the execution script to be generated; they also
 * determine how and where the script will be executed.
 *
 * @author Del Davis
 */
public class SimulationSpecificationDialog extends javax.swing.JDialog {

    // <editor-fold defaultstate="collapsed" desc="Auto-Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        
        codeRepositoryLocationLabel = new javax.swing.JLabel();
        codeRepositoryLocationTextField = new javax.swing.JTextField();
        runButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        simulationTypeLabel = new javax.swing.JLabel();
        simulationTypeComboBox = new javax.swing.JComboBox();
        versionAnnotationLabel = new javax.swing.JLabel();
        versionAnnotationTextField = new javax.swing.JTextField();
        simulatorLocationComboBox = new javax.swing.JComboBox();
        cloneOptionLabel = new javax.swing.JLabel();
        simulatorLocationLabel = new javax.swing.JLabel();
        cloneOptionComboBox = new javax.swing.JComboBox();
        testConnectionButton = new javax.swing.JButton();
        remoteSpecMessageContentLabel = new javax.swing.JLabel();
        hostAddressLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        hostAddressTextField = new javax.swing.JTextField();
        usernameTextField = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        passwordField = new javax.swing.JPasswordField();
        messageContentLabel = new javax.swing.JLabel();
        SHA1CheckoutKeyTextField = new javax.swing.JTextField();
        SHA1CheckoutKeyLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Simulation Specification");

        codeRepositoryLocationLabel.setText("Graphitti Code Repository:");
        codeRepositoryLocationLabel.setToolTipText(
                "<html>Repository to pull from.<br>This URI must go to a local folder,<br>or to a valid network address</html>");

        codeRepositoryLocationTextField.setText(DEFAULT_REPO_URI);
        codeRepositoryLocationTextField.setToolTipText(
                "<html>Repository to pull from.<br>This URI must go to a local folder,<br>or to a valid network address</html>");
        codeRepositoryLocationTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codeRepositoryLocationTextFieldKeyReleased(evt);
            }
        });
        
        runButton.setText("Run");
        runButton.setEnabled(false);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        simulationTypeLabel.setText("Simulator Execution Type: ");
        simulationTypeLabel.setToolTipText(
                "<html>If you wish to run growth, choose sequential<br>If you wish to run growth_gpu, choose parallel</html>");

        simulationTypeComboBox
                .setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sequential", "Parallel" }));

        versionAnnotationLabel.setText("Version Annotation:");
        versionAnnotationLabel.setToolTipText(
                "<html>A meaningful annotation to pair with<br>your source code version information<br>such as the repository branch</html>");

        versionAnnotationTextField.setToolTipText(
                "<html>A meaningful annotation to pair with<br>your source code version information<br>such as the repository branch</html>");
        versionAnnotationTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                versionAnnotationTextFieldKeyReleased(evt);
            }
        });

        simulatorLocationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Local", "Remote" }));
        simulatorLocationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulatorLocationComboBoxActionPerformed(evt);
            }
        });

        cloneOptionLabel.setText("Clone Option:");
        cloneOptionLabel
                .setToolTipText("<html>Directions for updating source code<br>prior to running the simulation</html>");

        simulatorLocationLabel.setText("Simulator Location: ");
        simulatorLocationLabel
                .setToolTipText("<html>Will you run Graphitti on a remote<br>machine or on this machine?</html>");

        cloneOptionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Clone New",
                                                                                                "Use Existing" }));

        testConnectionButton.setText("Test Connection");
        testConnectionButton.setEnabled(false);
        testConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testConnectionButtonActionPerformed(evt);
            }
        });

        remoteSpecMessageContentLabel.setText("<html><i>Message:</i><text></text></html>");
        remoteSpecMessageContentLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        hostAddressLabel.setText("* Host Address:");
        hostAddressLabel.setEnabled(false);

        usernameLabel.setText("Username:");
        usernameLabel.setEnabled(false);

        passwordLabel.setText("Password:");
        passwordLabel.setEnabled(false);

        hostAddressTextField.setEnabled(false);
        hostAddressTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hostAddressTextFieldKeyReleased(evt);
            }
        });

        usernameTextField.setEnabled(false);
        usernameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usernameTextFieldKeyReleased(evt);
            }
        });

        passwordField.setEnabled(false);
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordFieldKeyReleased(evt);
            }
        });

        messageContentLabel.setText("<html><i>Message:</i><text></text></html>");
        messageContentLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        SHA1CheckoutKeyTextField.setToolTipText(
                "<html>A meaningful annotation to pair with<br>your source code version information<br>such as the repository branch</html>");

        SHA1CheckoutKeyLabel.setText("SHA1 Checkout Key (optional):");
        SHA1CheckoutKeyLabel.setToolTipText(
                "<html>A meaningful annotation to pair with<br>your source code version information<br>such as the repository branch</html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup().addComponent(messageContentLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(runButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cancelButton))
                                .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup().addComponent(simulatorLocationLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(simulatorLocationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(hostAddressLabel)
                                                .addComponent(usernameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(passwordLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(hostAddressTextField,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                                                .addComponent(usernameTextField,
                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(passwordField,
                                                        javax.swing.GroupLayout.Alignment.LEADING)))
                                .addComponent(codeRepositoryLocationTextField, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        506, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                        layout.createSequentialGroup().addComponent(remoteSpecMessageContentLabel)
                                                .addGap(18, 18, 18).addComponent(testConnectionButton))
                                .addGroup(layout.createSequentialGroup().addGroup(layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(versionAnnotationLabel, javax.swing.GroupLayout.Alignment.LEADING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                                        .addComponent(versionAnnotationTextField,
                                                javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12,
                                                Short.MAX_VALUE)
                                        .addGroup(layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(SHA1CheckoutKeyTextField,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                                                .addComponent(
                                                        SHA1CheckoutKeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup().addGroup(layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(codeRepositoryLocationLabel,
                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                layout.createSequentialGroup().addComponent(simulationTypeLabel)
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(simulationTypeComboBox,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup().addComponent(cloneOptionLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cloneOptionComboBox,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(simulatorLocationLabel)
                                .addComponent(simulatorLocationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(hostAddressLabel).addComponent(hostAddressTextField,
                                        javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(usernameLabel)
                                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(passwordLabel)
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(testConnectionButton).addComponent(remoteSpecMessageContentLabel,
                                        javax.swing.GroupLayout.PREFERRED_SIZE, 23,
                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(simulationTypeLabel)
                                .addComponent(simulationTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cloneOptionLabel)// FOOOOOOBAAAAAAR
                                .addComponent(cloneOptionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(codeRepositoryLocationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(codeRepositoryLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(versionAnnotationLabel).addComponent(SHA1CheckoutKeyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(versionAnnotationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SHA1CheckoutKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28,
                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(cancelButton).addComponent(runButton))
                                        .addContainerGap())
                                .addComponent(messageContentLabel))));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
        cancel();
    }// GEN-LAST:event_cancelButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed
        specifySimulation();
    }// GEN-LAST:event_okButtonActionPerformed

    private void testConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_testConnectionButtonActionPerformed
        testConnection();
    }// GEN-LAST:event_testConnectionButtonActionPerformed

    private void simulatorLocationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_simulatorLocationComboBoxActionPerformed
        remoteOrLocalSet();
    }// GEN-LAST:event_simulatorLocationComboBoxActionPerformed

    private void hostAddressTextFieldKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_hostAddressTextFieldKeyReleased
        validateHostAddress();
        if (testConnectionButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                testConnection();
            }
        }
    }// GEN-LAST:event_hostAddressTextFieldKeyReleased

    private void usernameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_usernameTextFieldKeyReleased
        validateUsername();
        if (testConnectionButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                testConnection();
            }
        }
    }// GEN-LAST:event_usernameTextFieldKeyReleased

    private void passwordFieldKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_passwordFieldKeyReleased
        if (testConnectionButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                testConnection();
            }
        }
    }// GEN-LAST:event_passwordFieldKeyReleased

    private void codeRepositoryLocationTextFieldKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_codeRepositoryLocationTextFieldKeyReleased
        if (runButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                specifySimulation();
            }
        }
    }// GEN-LAST:event_codeRepositoryLocationTextFieldKeyReleased

    private void versionAnnotationTextFieldKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_versionAnnotationTextFieldKeyReleased
        if (runButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                specifySimulation();
            }
        }
    }// GEN-LAST:event_versionAnnotationTextFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BuildOptionLabel;
    private javax.swing.JLabel SHA1CheckoutKeyLabel;
    private javax.swing.JTextField SHA1CheckoutKeyTextField;
    private javax.swing.JComboBox buildOptionComboBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel codeRepositoryLocationLabel;
    private javax.swing.JTextField codeRepositoryLocationTextField;
    private javax.swing.JLabel hostAddressLabel;
    private javax.swing.JTextField hostAddressTextField;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel messageContentLabel;
    private javax.swing.JButton runButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel remoteSpecMessageContentLabel;
    private javax.swing.JComboBox simulationTypeComboBox;
    private javax.swing.JLabel simulationTypeLabel;
    private javax.swing.JComboBox simulatorLocationComboBox;
    private javax.swing.JLabel simulatorLocationLabel;
    private javax.swing.JTextField simulatorLocationTextField;
    private javax.swing.JComboBox cloneOptionComboBox;
    private javax.swing.JLabel cloneOptionLabel;
    private javax.swing.JButton testConnectionButton;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    private javax.swing.JLabel versionAnnotationLabel;
    private javax.swing.JTextField versionAnnotationTextField;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Custom Members">
    private static final Logger LOG = Logger.getLogger(SimulationSpecificationDialog.class.getName());
    private static final String LINUX_HOSTNAME_PATTERN
            = "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*)+(\\.([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*))*$";
    private static final String LINUX_USERNAME_PATTERN = "^[a-z][a-z0-9\\-]*$";
    private static final String DEFAULT_REPO_URI
            = "https://github.com/UWB-Biocomputing/Graphitti.git";
    private static final String DEFAULT_SIM_FOLDER = "Graphitti";
    private boolean okButtonClicked = false;
    private boolean connectionTestSuccessful = false;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Construction">
    /**
     * Responsible for allocating a new dialog, instantiating and initializing all members, and
     * making the dialog visible.
     *
     * @param modal  True if this dialog should prevent focus from shifting to it's parent,
     *               False if the focus can shift to the parent while this dialog is visible
     */
    public SimulationSpecificationDialog(boolean modal) {
        LOG.info("New SimulationSpecificationDialog");
        setModal(modal);
        initComponents();
        enableOkButton();
        center();
        pack();
        setVisible(true);
    }

    /**
     * Responsible for allocating a new dialog, instantiating and initializing all members, and
     * making the dialog visible. The dialog values are obtained from an existing simulation
     * specification.
     *
     * @param modal  True if this dialog should prevent focus from shifting to it's parent,
     *               False if the focus can shift to the parent while this dialog is visible
     * @param simSpec  A simulation specification containing parameters to be used in the dialog
     */
    public SimulationSpecificationDialog(boolean modal, SimulationSpecification simSpec) {
        LOG.info("New SimulationSpecificationDialog with SimulationSpecification");
        setModal(modal);
        initComponents();

        boolean remote = simSpec.isRemote();
        String simType = simSpec.getSimulationType();
        String gitPull = simSpec.getSourceCodeUpdating();

        String hostAddr = simSpec.getHostAddr();
        String username = simSpec.getUsername();
        String folder = simSpec.getSimulatorFolder();
        String codeLocation = simSpec.getCodeLocation();
        if (codeLocation == null || codeLocation.isEmpty()) {
            codeLocation = DEFAULT_REPO_URI;
        }
        String sha1Key = simSpec.hasCommitCheckout() ? simSpec.getSHA1CheckoutKey() : "";
        String version = simSpec.getVersionAnnotation();

        if (remote) {
            simulatorLocationComboBox.setSelectedIndex(
                    SimulationSpecification.REMOTE_EXECUTION_INDEX);
            if (hostAddr != null) {
                hostAddressTextField.setText(hostAddr);
            }
            if (username != null) {
                usernameTextField.setText(username);
            }
        } else {
            simulatorLocationComboBox.setSelectedIndex(
                    SimulationSpecification.LOCAL_EXECUTION_INDEX);
        }

        if (simType != null) {
            if (simType.equals(SimulationSpecification.SEQUENTIAL_SIMULATION)) {
                simulatorLocationComboBox.setSelectedItem(
                        SimulationSpecification.PARALLEL_SIMULATION_INDEX);
            } else {
                simulatorLocationComboBox.setSelectedItem(
                        SimulationSpecification.SEQUENTIAL_SIMULATION_INDEX);
            }
        }

        if (gitPull != null) {
            if (gitPull.equals(SimulationSpecification.CLONE_NEW)) {
                cloneOptionComboBox.setSelectedIndex(
                        SimulationSpecification.GIT_PULL_AND_CLONE_INDEX);
            } else {
                cloneOptionComboBox.setSelectedIndex(SimulationSpecification.GIT_NONE_INDEX);
            }
        }
        codeRepositoryLocationTextField.setText(codeLocation);
        versionAnnotationTextField.setText(version);
        SHA1CheckoutKeyTextField.setText(sha1Key);

        enableOkButton();

        center();
        pack();
        setVisible(true);
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="UI Manipulation">
    private void center() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        setLocation((screenSize.width - frameSize.width) / 2,
                (screenSize.height - frameSize.height) / 2);
    }

    private void setRemoteRelatedComponentsEnabled(boolean enabled) {
        hostAddressLabel.setEnabled(enabled);
        usernameLabel.setEnabled(enabled);
        passwordLabel.setEnabled(enabled);
        hostAddressTextField.setEnabled(enabled);
        usernameTextField.setEnabled(enabled);
        passwordField.setEnabled(enabled);
    }

    private void enableTestConnectionButton() {
        testConnectionButton.setEnabled(isValidHostname(hostAddressTextField.getText())
                && isValidUsername(usernameTextField.getText())
                && passwordField.getPassword() != null);
        connectionTestSuccessful = false;
    }

    private void enableOkButton() {
        // determine if any requirements are null or invalid
        boolean validHostAddress = isValidHostname(hostAddressTextField.getText());
        // set ok enabled based on state of required fields
        if (isRemoteExecution()) {
            runButton.setEnabled(validHostAddress);
        } else {
            runButton.setEnabled(true);
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Getters">
    /**
     * Indicates the exit route taken by the user from this dialog.
     *
     * @return True if the user clicked OK, otherwise false.
     */
    public boolean getSuccess() {
        return okButtonClicked;
    }

    /**
     * Provides a simulation specification with values set to their respective equivalents from this
     * dialog.
     *
     * @return A simulation specification populated from the state of this dialog
     */
    public SimulationSpecification toSimulationSpecification() {
        SimulationSpecification simSpec = new SimulationSpecification();
        simSpec.setCodeLocation(codeRepositoryLocationTextField.getText());
        simSpec.setVersionAnnotation(versionAnnotationTextField.getText());
        String locale = simulatorLocationComboBox.getSelectedItem().toString();
        simSpec.setSimulationLocale(locale);
        String type = simulationTypeComboBox.getSelectedItem().toString();
        simSpec.setSimulationType(type);
        String update = cloneOptionComboBox.getSelectedItem().toString();
        simSpec.setSourceCodeUpdating(update);
        simSpec.setHostAddr(hostAddressTextField.getText());
        simSpec.setUsername(usernameTextField.getText());
        simSpec.setSHA1CheckoutKey(SHA1CheckoutKeyTextField.getText());

        return simSpec;
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Validation">
    private boolean isValidHostname(String text) {
        return text != null && text.matches(LINUX_HOSTNAME_PATTERN);
    }

    private boolean isValidUsername(String text) {
        return text != null && text.matches(LINUX_USERNAME_PATTERN);
    }

    private boolean isRemoteExecution() {
        return simulatorLocationComboBox.getSelectedItem() != null
                && simulatorLocationComboBox.getSelectedItem().toString()
                .equals(SimulationSpecification.REMOTE_EXECUTION);
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="User Communication">
    private void setRemoteConnectionMsg(String msg, String color) {
        remoteSpecMessageContentLabel.setText("<html><i>Message: </i><b>" + "<span style=\"color:"
                + color + "\">" + msg + "</span></html>");
    }

    private void setPathValidationMsg(String msg, String color) {
        messageContentLabel.setText("<html><i>Message: </i><b>" + "<span style=\"color:" + color
                + "\">" + msg + "</span></html>");
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Action Helpers">
    private void specifySimulation() {
        okButtonClicked = true;
        passwordField.setText(null);
        setVisible(false);
    }

    private void cancel() {
        okButtonClicked = false;
        setVisible(false);
    }

    private void remoteOrLocalSet() {
        setRemoteRelatedComponentsEnabled(simulatorLocationComboBox.getSelectedIndex()
                == SimulationSpecification.REMOTE_EXECUTION_INDEX);
        if (!isRemoteExecution()) {
            setRemoteConnectionMsg("", "black");
        }
        enableOkButton();
    }

    private void validateHostAddress() {
        enableTestConnectionButton();
        enableOkButton();
        String username = usernameTextField.getText();
        if (!isValidHostname(hostAddressTextField.getText())) {
            setRemoteConnectionMsg("Invalid Host Address", "red");
        } else if (!isValidUsername(username) && !username.isEmpty()) {
            setRemoteConnectionMsg("Invalid Username", "red");
        } else {
            setRemoteConnectionMsg("", "black");
        }
    }

    private void validateUsername() {
        enableTestConnectionButton();
        String username = usernameTextField.getText();
        if (!isValidUsername(username) && !username.isEmpty()) {
            setRemoteConnectionMsg("Invalid Username", "red");
        } else if (!isValidHostname(hostAddressTextField.getText())) {
            setRemoteConnectionMsg("Invalid Host Address", "red");
        } else {
            setRemoteConnectionMsg("", "black");
        }
    }

    private void testConnection() {
        testConnectionButton.setEnabled(false);
        String hostname = hostAddressTextField.getText();
        String username = usernameTextField.getText();
        char[] password = passwordField.getPassword();
        // try to connect
        SecureFileTransfer sft = new SecureFileTransfer();
        boolean success = sft.testConnection(3000, hostname, username, password);
        String msg = success ? "Connection Successful" : "Connection Failed";
        String color = success ? "green" : "red";
        // report status
        setRemoteConnectionMsg(msg, color);
        // mark operation success
        connectionTestSuccessful = success;
        Arrays.fill(password, '0');
        // reset button
        testConnectionButton.setEnabled(true);
    }
    // </editor-fold>
}
